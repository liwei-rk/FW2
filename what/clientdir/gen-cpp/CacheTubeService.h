/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CacheTubeService_H
#define CacheTubeService_H

#include <TProcessor.h>
#include "CacheTubeService_types.h"

namespace cachetube { namespace thrift {

class CacheTubeServiceIf {
 public:
  virtual ~CacheTubeServiceIf() {}
  virtual void post(const std::string& queue_name, const std::vector<Message> & messages) = 0;
  virtual void get(std::vector<Message> & _return, const std::string& queue_name) = 0;
};

class CacheTubeServiceIfFactory {
 public:
  typedef CacheTubeServiceIf Handler;

  virtual ~CacheTubeServiceIfFactory() {}

  virtual CacheTubeServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CacheTubeServiceIf* /* handler */) = 0;
};

class CacheTubeServiceIfSingletonFactory : virtual public CacheTubeServiceIfFactory {
 public:
  CacheTubeServiceIfSingletonFactory(const boost::shared_ptr<CacheTubeServiceIf>& iface) : iface_(iface) {}
  virtual ~CacheTubeServiceIfSingletonFactory() {}

  virtual CacheTubeServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CacheTubeServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CacheTubeServiceIf> iface_;
};

class CacheTubeServiceNull : virtual public CacheTubeServiceIf {
 public:
  virtual ~CacheTubeServiceNull() {}
  void post(const std::string& /* queue_name */, const std::vector<Message> & /* messages */) {
    return;
  }
  void get(std::vector<Message> & /* _return */, const std::string& /* queue_name */) {
    return;
  }
};

typedef struct _CacheTubeService_post_args__isset {
  _CacheTubeService_post_args__isset() : queue_name(false), messages(false) {}
  bool queue_name;
  bool messages;
} _CacheTubeService_post_args__isset;

class CacheTubeService_post_args {
 public:

  CacheTubeService_post_args() : queue_name("") {
  }

  virtual ~CacheTubeService_post_args() throw() {}

  std::string queue_name;
  std::vector<Message>  messages;

  _CacheTubeService_post_args__isset __isset;

  void __set_queue_name(const std::string& val) {
    queue_name = val;
  }

  void __set_messages(const std::vector<Message> & val) {
    messages = val;
  }

  bool operator == (const CacheTubeService_post_args & rhs) const
  {
    if (!(queue_name == rhs.queue_name))
      return false;
    if (!(messages == rhs.messages))
      return false;
    return true;
  }
  bool operator != (const CacheTubeService_post_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheTubeService_post_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheTubeService_post_pargs {
 public:


  virtual ~CacheTubeService_post_pargs() throw() {}

  const std::string* queue_name;
  const std::vector<Message> * messages;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheTubeService_post_result__isset {
  _CacheTubeService_post_result__isset() : f(false) {}
  bool f;
} _CacheTubeService_post_result__isset;

class CacheTubeService_post_result {
 public:

  CacheTubeService_post_result() {
  }

  virtual ~CacheTubeService_post_result() throw() {}

  Failure f;

  _CacheTubeService_post_result__isset __isset;

  void __set_f(const Failure& val) {
    f = val;
  }

  bool operator == (const CacheTubeService_post_result & rhs) const
  {
    if (!(f == rhs.f))
      return false;
    return true;
  }
  bool operator != (const CacheTubeService_post_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheTubeService_post_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheTubeService_post_presult__isset {
  _CacheTubeService_post_presult__isset() : f(false) {}
  bool f;
} _CacheTubeService_post_presult__isset;

class CacheTubeService_post_presult {
 public:


  virtual ~CacheTubeService_post_presult() throw() {}

  Failure f;

  _CacheTubeService_post_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheTubeService_get_args__isset {
  _CacheTubeService_get_args__isset() : queue_name(false) {}
  bool queue_name;
} _CacheTubeService_get_args__isset;

class CacheTubeService_get_args {
 public:

  CacheTubeService_get_args() : queue_name("") {
  }

  virtual ~CacheTubeService_get_args() throw() {}

  std::string queue_name;

  _CacheTubeService_get_args__isset __isset;

  void __set_queue_name(const std::string& val) {
    queue_name = val;
  }

  bool operator == (const CacheTubeService_get_args & rhs) const
  {
    if (!(queue_name == rhs.queue_name))
      return false;
    return true;
  }
  bool operator != (const CacheTubeService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheTubeService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheTubeService_get_pargs {
 public:


  virtual ~CacheTubeService_get_pargs() throw() {}

  const std::string* queue_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheTubeService_get_result__isset {
  _CacheTubeService_get_result__isset() : success(false), f(false) {}
  bool success;
  bool f;
} _CacheTubeService_get_result__isset;

class CacheTubeService_get_result {
 public:

  CacheTubeService_get_result() {
  }

  virtual ~CacheTubeService_get_result() throw() {}

  std::vector<Message>  success;
  Failure f;

  _CacheTubeService_get_result__isset __isset;

  void __set_success(const std::vector<Message> & val) {
    success = val;
  }

  void __set_f(const Failure& val) {
    f = val;
  }

  bool operator == (const CacheTubeService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(f == rhs.f))
      return false;
    return true;
  }
  bool operator != (const CacheTubeService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheTubeService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheTubeService_get_presult__isset {
  _CacheTubeService_get_presult__isset() : success(false), f(false) {}
  bool success;
  bool f;
} _CacheTubeService_get_presult__isset;

class CacheTubeService_get_presult {
 public:


  virtual ~CacheTubeService_get_presult() throw() {}

  std::vector<Message> * success;
  Failure f;

  _CacheTubeService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CacheTubeServiceClient : virtual public CacheTubeServiceIf {
 public:
  CacheTubeServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CacheTubeServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void post(const std::string& queue_name, const std::vector<Message> & messages);
  void send_post(const std::string& queue_name, const std::vector<Message> & messages);
  void recv_post();
  void get(std::vector<Message> & _return, const std::string& queue_name);
  void send_get(const std::string& queue_name);
  void recv_get(std::vector<Message> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CacheTubeServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<CacheTubeServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (CacheTubeServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_post(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CacheTubeServiceProcessor(boost::shared_ptr<CacheTubeServiceIf> iface) :
    iface_(iface) {
    processMap_["post"] = &CacheTubeServiceProcessor::process_post;
    processMap_["get"] = &CacheTubeServiceProcessor::process_get;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~CacheTubeServiceProcessor() {}
};

class CacheTubeServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CacheTubeServiceProcessorFactory(const ::boost::shared_ptr< CacheTubeServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CacheTubeServiceIfFactory > handlerFactory_;
};

class CacheTubeServiceMultiface : virtual public CacheTubeServiceIf {
 public:
  CacheTubeServiceMultiface(std::vector<boost::shared_ptr<CacheTubeServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CacheTubeServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CacheTubeServiceIf> > ifaces_;
  CacheTubeServiceMultiface() {}
  void add(boost::shared_ptr<CacheTubeServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void post(const std::string& queue_name, const std::vector<Message> & messages) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->post(queue_name, messages);
    }
  }

  void get(std::vector<Message> & _return, const std::string& queue_name) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get(_return, queue_name);
        return;
      } else {
        ifaces_[i]->get(_return, queue_name);
      }
    }
  }

};

}} // namespace

#endif
