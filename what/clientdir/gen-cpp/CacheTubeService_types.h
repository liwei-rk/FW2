/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CacheTubeService_TYPES_H
#define CacheTubeService_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace cachetube { namespace thrift {

typedef struct _Message__isset {
  _Message__isset() : queue_name(false), message_id(false), source_ip(false), created_time(false), content(false) {}
  bool queue_name;
  bool message_id;
  bool source_ip;
  bool created_time;
  bool content;
} _Message__isset;

class Message {
 public:

  static const char* ascii_fingerprint; // = "38DA20C24C2EBC83776DC0D4F68801B2";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0xDA,0x20,0xC2,0x4C,0x2E,0xBC,0x83,0x77,0x6D,0xC0,0xD4,0xF6,0x88,0x01,0xB2};

  Message() : queue_name(""), message_id(0), source_ip(""), created_time(0), content("") {
  }

  virtual ~Message() throw() {}

  std::string queue_name;
  int64_t message_id;
  std::string source_ip;
  int64_t created_time;
  std::string content;

  _Message__isset __isset;

  void __set_queue_name(const std::string& val) {
    queue_name = val;
  }

  void __set_message_id(const int64_t val) {
    message_id = val;
  }

  void __set_source_ip(const std::string& val) {
    source_ip = val;
  }

  void __set_created_time(const int64_t val) {
    created_time = val;
  }

  void __set_content(const std::string& val) {
    content = val;
  }

  bool operator == (const Message & rhs) const
  {
    if (!(queue_name == rhs.queue_name))
      return false;
    if (!(message_id == rhs.message_id))
      return false;
    if (!(source_ip == rhs.source_ip))
      return false;
    if (!(created_time == rhs.created_time))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Failure__isset {
  _Failure__isset() : error_code(false), description(false) {}
  bool error_code;
  bool description;
} _Failure__isset;

class Failure : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Failure() : error_code(0), description("") {
  }

  virtual ~Failure() throw() {}
	virtual ::std::string classname( void ) const {
		return ::std::string( "Failure" );
	}
  int32_t error_code;
  std::string description;

  _Failure__isset __isset;

  void __set_error_code(const int32_t val) {
    error_code = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  bool operator == (const Failure & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const Failure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Failure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
